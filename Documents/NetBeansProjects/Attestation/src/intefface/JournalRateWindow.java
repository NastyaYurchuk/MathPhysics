/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intefface;

import dao.DaoFactory;
import dao.entities.DateAttestation;
import dao.entities.Group;
import dao.entities.LecturerWorkload;
import dao.entities.ResultLecture;
import dao.entities.Student;
import dao.entities.StudentAttestation;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author nastja
 */
public class JournalRateWindow extends javax.swing.JFrame {

    DefaultTableModel model;
    LecturerWorkload lecturerWorkload;
    List<ResultLecture> resLecture;
    List<Date> dateLecture;
    List<Student> students;
    Map<Date, Integer> maxRates;
    DaoFactory daoFactory;
    Integer[] sumMark;
    List<ResultLecture> changeList;
    int maxMark;
    DateAttestation da;
    Boolean isAttestate = false;
    Boolean isReattestate = false;
    Date lastAttestate;
    /**
     * Creates new form JournalRateWindow
     */
    public JournalRateWindow() {
        initComponents();
        model = (DefaultTableModel) tableJournal.getModel();

    }

    JournalRateWindow(LecturerWorkload l) {
        initComponents();
        this.lecturerWorkload = l;
        this.setVisible(true);
        daoFactory = DaoFactory.getInstance(DaoFactory.DaoType.ORACLE);
        tableJournal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tableJournal.setColumnSelectionAllowed(true);
        tableJournal.getSelectionModel().addListSelectionListener(new JournalRateWindow.ColumnListener());
        System.out.println("init date");
       
        da = daoFactory.createDateAttestationDao().findCurrent(new Date(System.currentTimeMillis()));
        lastAttestate = daoFactory.createDateAttestationDao().lastAttestation(da);
        System.out.println("cur date " + new Date(System.currentTimeMillis()).toString());
        System.out.println("da = " + da.toString());
        fillTableJournal();
        tableJournal.setColumnSelectionAllowed(true);
        changeList = new ArrayList<ResultLecture>();
        buttonAttestate.setEnabled(checkAttestateEnable());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableJournal = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        buttonAdd = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        labelMaxMark = new javax.swing.JLabel();
        labelDate = new javax.swing.JLabel();
        formatDateLecture = new javax.swing.JFormattedTextField();
        labelWrongMark = new javax.swing.JLabel();
        textMark = new javax.swing.JTextField();
        labelJournal = new javax.swing.JLabel();
        buttonAttestate = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableJournal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableJournal);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonEdit.setText("Edit");
        buttonEdit.setEnabled(false);
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.setEnabled(false);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        labelMaxMark.setText("Max mark:");

        labelDate.setText("Date of lecturer:");

        try {
            formatDateLecture.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        formatDateLecture.setText("yyyy-mm-dd  ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelMaxMark, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                    .addComponent(formatDateLecture)
                    .addComponent(textMark))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelWrongMark, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(360, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatDateLecture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelWrongMark, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textMark)
                    .addComponent(labelMaxMark, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd)
                    .addComponent(buttonEdit)
                    .addComponent(buttonDelete)))
        );

        buttonAttestate.setText("Attestate");
        buttonAttestate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAttestateActionPerformed(evt);
            }
        });

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addComponent(labelJournal, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(buttonAttestate, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(labelJournal, javax.swing.GroupLayout.DEFAULT_SIZE, 12, Short.MAX_VALUE)
                .addGap(67, 67, 67)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAttestate)
                    .addComponent(buttonSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed

        int mark = Integer.parseInt(textMark.getText());
        String[] dateSplit = formatDateLecture.getText().split("-");
        System.out.println(Arrays.toString(dateSplit));
        Date date = new Date((Integer.parseInt(dateSplit[0]) - 1900),
                (Integer.parseInt(dateSplit[1]) - 1), Integer.parseInt(dateSplit[2]));
        System.out.println(date);
        if (mark <= 100 - maxMark) {
            maxRates.put(date, mark);
            System.out.println("name col " + tableJournal.getColumnName(model.getColumnCount() - 1));
            maxMark += mark;
            addResultLecture(mark, date);
            fillTableJournal();
        } else {
            labelWrongMark.setText("Too big...");
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed

        String[] dateSplit = model.getColumnName(tableJournal.getSelectedColumn()).split("-");
        System.out.println(Arrays.toString(dateSplit));
        Date dateDel = new Date((Integer.parseInt(dateSplit[0]) - 1900),
                (Integer.parseInt(dateSplit[1]) - 1), Integer.parseInt(dateSplit[2]));
        daoFactory.createResultLectureDao().deleteByDate(dateDel, lecturerWorkload);

        fillTableJournal();
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        String[] dateSplit = model.getColumnName(tableJournal.getSelectedColumn()).split("-");
        System.out.println(Arrays.toString(dateSplit));
        Date oldDate = new Date((Integer.parseInt(dateSplit[0]) - 1900),
                (Integer.parseInt(dateSplit[1]) - 1), Integer.parseInt(dateSplit[2]));
        int newMark = Integer.parseInt(textMark.getText());
        String[] newDateSplit = formatDateLecture.getText().split("-");
        System.out.println(Arrays.toString(dateSplit));
        Date newDate = new Date((Integer.parseInt(dateSplit[0]) - 1900),
                (Integer.parseInt(dateSplit[1]) - 1), Integer.parseInt(dateSplit[2]));
        daoFactory.createResultLectureDao().update(oldDate, lecturerWorkload, newMark, newDate);
        fillTableJournal();

    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed

        System.out.println(changeList.toString());
        daoFactory.createResultLectureDao().updateMark(changeList);
        fillTableJournal();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonAttestateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAttestateActionPerformed
        List<StudentAttestation> attestations = new ArrayList<>();
        for(int i = 0; i < students.size(); i++){
            System.out.println("sum mark " + sumMark[i]);
            if(sumMark[i] > (maxMark * 0.6)){
                System.out.println("attetate this" + students.get(i).getName());
                attestations.add(new StudentAttestation(da.getId(), students.get(i).getId(),
                        lecturerWorkload.getNameSubject(), "a"));
            }
            else{
                System.out.println(" not attetate this" + students.get(i).getName());
                attestations.add(new StudentAttestation(da.getId(), students.get(i).getId(),
                        lecturerWorkload.getNameSubject(), "na"));
            }
        }
        if(isReattestate){
            System.out.println("update this shit");
            daoFactory.createStudentAttestationDao().updateAttestation(attestations);
        } else{
            daoFactory.createStudentAttestationDao().setListAttestation(attestations);
        }
        
        fillTableJournal();
        buttonAttestate.setEnabled(checkAttestateEnable());
    }//GEN-LAST:event_buttonAttestateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JournalRateWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JournalRateWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JournalRateWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JournalRateWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JournalRateWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonAttestate;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonSave;
    private javax.swing.JFormattedTextField formatDateLecture;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelJournal;
    private javax.swing.JLabel labelMaxMark;
    private javax.swing.JLabel labelWrongMark;
    private javax.swing.JTable tableJournal;
    private javax.swing.JTextField textMark;
    // End of variables declaration//GEN-END:variables

    private void fillTableJournal() {
        clearTableJournal();
        students = daoFactory.createStudentDao().findGroupList(new Group(lecturerWorkload.getGroupCode()));
        
        dateLecture = daoFactory.createResultLectureDao().findDateByAttest(
                lecturerWorkload, lastAttestate);
        //System.out.println(students.size());
        sumMark = new Integer[students.size()];
        for (int j = 0; j < students.size(); j++) {
            sumMark[j] = 0;
        }
        fillColumnStudent();
        for (int i = 0; i < dateLecture.size(); i++) {
            Date date = dateLecture.get(i);
            List<Integer> dateRes = daoFactory.createResultLectureDao().
                    findByDateLecWork(lecturerWorkload, date);
            findSum(sumMark, dateRes);
           // System.out.println("lrn " + dateRes.size());
            model.addColumn(dateLecture.get(i).toString(), dateRes.toArray());

        }
        maxRates = daoFactory.createResultLectureDao().findAllMaxMark(lecturerWorkload, lastAttestate);
        maxMark = daoFactory.createResultLectureDao().findSumMaxMark(lecturerWorkload, lastAttestate);
        model.addColumn("Sum", sumMark);

        //   maxRates = daoFactory.createResultLectureDao().findAllMaxMark(lecturerWorkload);
        List<Object> rowMaxRates = new ArrayList<>();
        rowMaxRates.add("Max rates");
        rowMaxRates.addAll(maxRates.values());
        System.out.println(rowMaxRates.toString());
        model.insertRow(0, rowMaxRates.toArray());
        model.setValueAt(maxMark, 0, model.getColumnCount() - 1);
        
        fillAttestationColumn();
        

    }

    private void clearTableJournal() {
     // initComponents();
     /*  int n = tableJournal.getRowCount();
         for (int i = 0; i < n; i++) {
         System.out.println(tableJournal.getRowCount());
         model.removeRow(0);       
         }*/
        tableJournal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        // model = (DefaultTableModel)tableJournal.getModel();
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int col) {
                if (col < 1 || col == this.getColumnCount() - 1 || row < 1) {
                    return false;
                } else {
                    return true;
                }

            }

            @Override
            public void setValueAt(Object aValue, int row, int column) {
                System.out.println("setValueAt");
                System.out.println("change" + aValue.toString() + " " + row + " " + column);
                if (row != 0) {
                    try{
                    Integer.parseInt(aValue.toString());
                }catch(Exception e){
                    aValue = 0;
                }
                if(Integer.parseInt(aValue.toString()) > Integer.parseInt(model.getValueAt(0, column).toString())){
                     aValue =    Integer.parseInt(model.getValueAt(0, column).toString());          
                }
                }
                System.out.println("avalue " + aValue);
                super.setValueAt(aValue, row, column);

                addChangeList(aValue, row, column);
                
            }

            private void addChangeList(Object aValue, int row, int column) {
                if (row != 0) {
                    Student s = students.get(row - 1);
                    String[] dateSplit = model.getColumnName(column).split("-");
                    System.out.println(Arrays.toString(dateSplit));
                    Date date = new Date((Integer.parseInt(dateSplit[0]) - 1900),
                            (Integer.parseInt(dateSplit[1]) - 1), Integer.parseInt(dateSplit[2]));
                    if (changeList.isEmpty()) {
                        System.out.println("value " + new Integer(aValue.toString()));
                        ResultLecture rl = new ResultLecture(new Integer(aValue.toString()),
                                s.getId(), lecturerWorkload.getId(),
                                0, date, maxRates.get(date));
                        changeList.add(rl);
                    } else {
                        boolean sameRL = false;
                        for (int i = 0; i < changeList.size(); i++) {
                            if (s.getId() == changeList.get(i).getIdStudent()
                                    && date.equals(changeList.get(i).getDateLecture())) {
                                System.out.println("the same");
                                changeList.get(i).setStudentRate(new Integer(aValue.toString()));
                                sameRL = true;
                                break;
                            }
                        }
                            if (!sameRL) {
                                System.out.println("add");
                                ResultLecture rl = new ResultLecture(new Integer(aValue.toString()), s.getId(),
                                        lecturerWorkload.getId(), 0, date, maxRates.get(date));
                                changeList.add(rl);
                                System.out.println(changeList.toString());
                            }

                        
                    }
                }
            }
        };
        tableJournal.setModel(model);

    }

    private void findSum(Integer[] sum, List<Integer> dateRes) {
        for (int j = 0; j < sum.length; j++) {
            sum[j] += dateRes.get(j);
        }
    }

    private void fillColumnStudent() {
       // String[] nameStud = new String[students.size()];
       /* for (int i = 0; i < students.size(); i++) {
            System.out.println(dateLecture.get(i).toString());
            nameStud[i] = students.get(i).getName();
        }*/
        model.addColumn("Student", students.toArray());
       
        TableColumn column = tableJournal.getColumnModel().getColumn(0);
        column.setPreferredWidth(120);
        column.setResizable(false);
        

    }

    private void addSumRates(int mark) {
        model.addColumn("Max = " + (maxMark + mark) + "", sumMark);
    }

    private void addResultLecture(int mark, Date date) {
        daoFactory.createResultLectureDao().createEmpty(new ResultLecture(0, 0,
                lecturerWorkload.getId(), 0, date, mark), students);

    }

    private void fillAttestationColumn() {
        System.out.println("da " + da.toString());
       List<StudentAttestation> studAttest = daoFactory.
               createStudentAttestationDao().findByGroup(lecturerWorkload, da);
        System.out.println(studAttest.toString());
        String[] attest = new String[studAttest.size() + 1];
         if(studAttest.isEmpty()){
            System.out.println("isAttstate = false");
            isReattestate = false;
        }else {
             isReattestate = true;
              for(int i= 0; i < students.size(); i++){
            if(studAttest.get(i).getIdStud() != students.get(i).getId()){
                studAttest.add(i, new StudentAttestation());
            }
        }
         }
       //model.addColumn("Attestation");
       
       
        studAttest.add(0, new StudentAttestation());
        System.out.println("stat " + studAttest.toString());
       model.addColumn("Attestation", studAttest.toArray());
    }

    private boolean checkAttestateEnable() {
        Date currentDate = new Date(System.currentTimeMillis());
        if(!da.isEmpty() && !isAttestate  ){
            System.out.println("check attes = true");
            return true;
            
        }else {
            System.out.println("check attes = false");
            return false;
        }
    }

    
    
    private class ColumnListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
            System.out.println("column selected");
            buttonDelete.setEnabled(true);
            buttonEdit.setEnabled(true);
            if (tableJournal.getSelectedColumn() != -1) {
                String[] dateSplit = model.getColumnName(tableJournal.getSelectedColumn()).split("-");
                System.out.println(Arrays.toString(dateSplit));
                Date dateDel = new Date((Integer.parseInt(dateSplit[0]) - 1900),
                        (Integer.parseInt(dateSplit[1]) - 1), Integer.parseInt(dateSplit[2]));
                System.out.println(model.getValueAt(0, tableJournal.getSelectedColumn()));
                int mark = (int) model.getValueAt(0, tableJournal.getSelectedColumn());

                textMark.setText(Integer.toString(mark));
                formatDateLecture.setText(model.getColumnName(tableJournal.getSelectedColumn()));
            }
        }

    }

}
